

/*generacion odd*/

%LET INTERNO= "76331390-5","92475000-6","79506530-K","96582070-1","79707690-2","1701";


OPTIONS COMPRESS=YES;
OPTIONS NOXWAIT;

/********************************************************************************/
/*                        GENERACION BASE DE CANDIDATOS                         */
/********************************************************************************/

/*

PASOS FALTANTES:
-BUSCAR DESDE SERVICIO ULTIMOS CLIENTES DEL VEHICULO
-BUSCAR DESDE EL RVM CAMBIOS DE CLIENTE


*/

/*Muerte de tablas*/
PROC DATASETS nolist LIBRARY=WORK kill;run;

/*carga de librerias*/
%INCLUDE "E:\KAUFMANN\SAS\LIBRERIAS.SAS"/SOURCE2;

*LIBNAME KAUFMANN "F:\KAUFMANN\DATOS\DW";

/*TUVO CONTRATO ALGUNA VEZ*/
DATA VALIDEZ_CONTRATO; SET KAUFMANN.VALIDEZ_CONTRATO;

IF CLASE_DOCT = "ZFCM" AND MATERIAL NOT = "" AND MATERIAL NOT IN ("CM_FLEETBOARD","FLEETBOARD","FLEETBOARD_HW") THEN CHANGE_DOCT = "X";

RUN;

PROC SQL;
   CREATE TABLE WORK.CHANGE AS 
   SELECT DISTINCT t1.NUM_CONTR, "X" AS CHANGE
      FROM WORK.VALIDEZ_CONTRATO t1
      WHERE t1.CHANGE_DOCT = 'X';
QUIT;

PROC SQL;
   CREATE TABLE WORK.VALIDEZ_CONTRATO AS 
   SELECT t1.*, t2.CHANGE
      FROM WORK.VALIDEZ_CONTRATO t1
           LEFT JOIN WORK.CHANGE t2 ON (t1.NUM_CONTR = t2.NUM_CONTR)
   ORDER BY NUM_CONTR, POS;
QUIT;

DATA VALIDEZ_CONTRATO; 
SET VALIDEZ_CONTRATO; 
IF CHANGE = "X" THEN CLASE_DOCT = "ZTCM"; 
IF CLASE_DOCT NOT = "ZTCM" THEN DELETE; 
RUN;

PROC SORT DATA=VALIDEZ_CONTRATO NODUPKEY; BY CHASSI_VEH2;RUN;


/*VENTA DESDE LEGADOS DE VEHICULOS*/
PROC SQL;
   CREATE TABLE INI_1 AS 
   SELECT t1.RUT, 
          T1.RAZON_SOCIAL,
          t1.NRO_CHASSIS, 
          t1.NRO_VIN, 
          t1.CHASSIS_CORTO, 
          t1.FEC_DOCTO_VTA, 
          t1.PROVEEDOR,
		  T1.PATENTE,
		  T1.SUCURSAL,
		  T3.NOM_CIUDAD AS CIUDAD,
		  T3.NOM_COMUNA AS COMUNA,
		  T1.PROVEEDOR,
		  T1.NETO_VEHICULO_FICHA,
		  T1.TOTAL_DESCUENTO_FICHA,
		  T1.TIPO_FICHA AS FORMA_DE_PAGO,
		  T1.MONEDA_FICHA,
		  T1.TIPO_CAMBIO_FICHA,
		  T1.FAMILIA,
		  T4.TIPO_CONTRATO,
         (CASE WHEN T1.RUT IN (&INTERNO.) THEN 'EXTERNO' ELSE 'INTERNO' END) AS VTA_KAUFMANN
      FROM CLIMABI.BD_ACCOUNT_MANAGER t1 LEFT JOIN UNIDADES.SUCURSAL AS T2 ON (T1.SUCURSAL=T2.NOM_SUC)
	  LEFT JOIN UNIDADES.LOCALIDAD AS T3 ON (T2.COD_LOCALIDAD = T3.COD_LOCALIDAD)
	  LEFT JOIN VALIDEZ_CONTRATO AS T4 ON (T1.NRO_VIN = T4.CHASSI_VEH2 AND T4.CHASSI_VEH2 NE '')
      WHERE t1.DESC_FAMILIA ne 'AUTOMOVILES' AND t1.MARCA IN ('MERCEDES-BENZ','MITSUBISHI-FUSO') /*AND t1.PROVEEDOR NOT = 'USADOS'*/ AND year(t1.FEC_DOCTO_VTA) > 2003 
      ORDER BY t1.CHASSIS_CORTO,t1.FEC_DOCTO_VTA,t1.RUT,t1.PROVEEDOR;
QUIT;


/*INTENTO COMPLETAR PATENTES CON TODAS LAS BASES DISPONIBLES CONFIABLES*/

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_VEHICULOS_MOD_CLASIFIC AS 
   SELECT DISTINCT t1.ID_VEH, 
          t1.PATENTE, 
          t1.CHASSIS, 
		  t1.NRO_INTERNO,
          t1.DES_MOD1, 
          t1.MODELO, 
          t1.FAMILIA, 
          t1.SEGMENTO
      FROM KAUFMANN.VEHICULOS_MOD_CLASIFICACION t1 WHERE T1.CHASSIS NE '' AND
      LENGTH(COMPRESS(T1.CHASSIS))=17 AND SEGMENTO IN ("VANS/FURGONES");
QUIT;


/*ESTA TABLA PUEDE TENER DUPLICADOS POR CHASSIS*/
PROC SORT DATA=QUERY_FOR_VEHICULOS_MOD_CLASIFIC NODUPKEY; BY CHASSIS;RUN;

PROC SQL;
CREATE TABLE INI_2 AS SELECT
          t1.RUT, 
          T1.RAZON_SOCIAL,
          t1.NRO_CHASSIS, 
          t1.NRO_VIN, 
          t1.CHASSIS_CORTO, 
		  T2.ID_VEH,
          t1.FEC_DOCTO_VTA, 
          t1.PROVEEDOR,  
          (CASE WHEN T1.PATENTE = '' AND T2.PATENTE NE '' THEN T2.PATENTE ELSE T1.PATENTE END) AS PATENTE,
		  T1.SUCURSAL,
		  T1.CIUDAD,
		  T1.COMUNA,
		  T1.PROVEEDOR,
		  T1.NETO_VEHICULO_FICHA,
		  T1.TOTAL_DESCUENTO_FICHA,
		  T1.FORMA_DE_PAGO,
		  T1.MONEDA_FICHA,
		  T1.TIPO_CAMBIO_FICHA,
		  T1.FAMILIA,
		  T1.TIPO_CONTRATO,
		  T1.VTA_KAUFMANN,
		  T2.DES_MOD1,
          T2.MODELO,
          T2.FAMILIA
FROM INI_1 AS T1 
LEFT JOIN QUERY_FOR_VEHICULOS_MOD_CLASIFIC AS T2 ON (T1.NRO_CHASSIS=T2.CHASSIS AND T2.DES_MOD1 NE '')
WHERE T2.MODELO NE '';
QUIT;

/* ARREGLAMOS LOS PROBLEMAS DE DUPLICIDAD GENERADOS (UN CHASSIS CON DOS VIN´S DISTINTOS)*/

PROC SQL;
CREATE TABLE AAA AS SELECT DISTINCT NRO_CHASSIS,NRO_VIN FROM INI_2;QUIT;

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_AAA AS 
   SELECT t1.NRO_CHASSIS, 
          /* COUNT_of_NRO_VIN */
            (COUNT(t1.NRO_VIN)) AS COUNT_of_NRO_VIN
      FROM WORK.AAA t1
      GROUP BY t1.NRO_CHASSIS
      ORDER BY COUNT_of_NRO_VIN DESC;
QUIT;

PROC SQL;
CREATE TABLE INI_3 AS SELECT
		  t1.RUT, 
          T1.RAZON_SOCIAL,
          t1.NRO_CHASSIS, 
          t1.NRO_VIN, 
          t1.CHASSIS_CORTO, 
		  T1.ID_VEH,
          t1.FEC_DOCTO_VTA, 
          t1.PROVEEDOR,  
          T1.PATENTE,
		  T1.SUCURSAL,
		  T1.CIUDAD,
		  T1.COMUNA,
		  T1.PROVEEDOR,
		  T1.NETO_VEHICULO_FICHA,
		  T1.TOTAL_DESCUENTO_FICHA,
		  T1.FORMA_DE_PAGO,
		  T1.MONEDA_FICHA,
		  T1.TIPO_CAMBIO_FICHA,
		  T1.FAMILIA,
		  T1.TIPO_CONTRATO,
		  T1.VTA_KAUFMANN,
		  T1.DES_MOD1,
          T1.MODELO,
          T1.FAMILIA,
          T2.ZZ_VMS_LV
FROM INI_2 AS T1 LEFT JOIN KAUFMANN.VLCVEHICLE AS T2 ON (T1.ID_VEH=T2.VGUID)
WHERE NRO_CHASSIS NOT IN (SELECT DISTINCT NRO_CHASSIS FROM QUERY_FOR_AAA WHERE COUNT_of_NRO_VIN >1)
ORDER BY T1.ID_VEH DESC,  T1.FEC_DOCTO_VTA DESC;
QUIT;

/*VIGENCIA*/

DATA INI_3_1;
SET INI_3;
IF ID_VEH NE ''  THEN TERMINO_VTA=LAG(FEC_DOCTO_VTA);
IF ID_VEH NE '' THEN  ID_VEH_1=LAG(ID_VEH);
IF ID_VEH_1 NE ID_VEH THEN TERMINO_VTA = .;
FORMAT TERMINO_VTA DDMMYY10.;
DROP ID_VEH_1;
RUN;

PROC SQL;
   CREATE TABLE INI_3_2 AS 
   SELECT 
          t1.RUT, 
          T1.RAZON_SOCIAL,
          t1.NRO_CHASSIS, 
          t1.NRO_VIN, 
          t1.CHASSIS_CORTO, 
		  T1.ID_VEH,
          t1.FEC_DOCTO_VTA, 
		  (CASE WHEN t1.TERMINO_VTA=. THEN TODAY() ELSE t1.TERMINO_VTA END) AS TERMINO_VTA FORMAT=DDMMYY10., 
          t1.PROVEEDOR,  
          T1.PATENTE,
		  T1.SUCURSAL,
		  T1.CIUDAD,
		  T1.COMUNA,
		  T1.PROVEEDOR,
		  T1.NETO_VEHICULO_FICHA,
		  T1.TOTAL_DESCUENTO_FICHA,
		  T1.FORMA_DE_PAGO,
		  T1.MONEDA_FICHA,
		  T1.TIPO_CAMBIO_FICHA,
		  T1.FAMILIA,
		  T1.TIPO_CONTRATO,
		  T1.VTA_KAUFMANN,
		  T1.DES_MOD1,
          T1.MODELO,
          T1.FAMILIA,
          T1.ZZ_VMS_LV
      FROM WORK.INI_3_1 t1;
QUIT;


/*INCORPORO DATOS DE DYP A TABLA GENERAL*/

PROC SQL;
CREATE TABLE PEDIDO_TIPO_SERVICIO AS SELECT
T1.*
FROM CLIPVCM.PEDIDO_TIPO_SERVICIO AS T1;
QUIT;

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_PEDIDO_TIPO_SERVICIO AS 
   SELECT t1.PEDIDO, 
          T1.ID_VEH,
          t1.FECHA_APER, 
          t1.KML, 
          t1.DESC_CENTRO, 
          t1.RUT_SOLICITANTE, 
          t1.COBERTURA, 
          (CASE WHEN t1.CATEGORIA='' THEN 'OTRO' ELSE t1.CATEGORIA END) AS CATEGORIA_VISITA, 
          t1.OT_MANT, 
          t1.TIPO_MANT, 
          t1.DESC_MANT, 
          t1.TIPO_PED_CABECERA
      FROM WORK.PEDIDO_TIPO_SERVICIO t1;
QUIT;



PROC SQL;
CREATE TABLE INI_4 AS SELECT
          t1.RUT, 
          T1.RAZON_SOCIAL,
          t1.NRO_CHASSIS, 
          t1.NRO_VIN, 
          t1.CHASSIS_CORTO, 
		  T1.ID_VEH,
          t1.FEC_DOCTO_VTA, 
		  T1.TERMINO_VTA, 
          T1.PATENTE,
		  T1.SUCURSAL,
		  T1.CIUDAD,
		  T1.COMUNA,
		  T3.PROVINCIA AS PROVINCIA_CLIENTE,
		  T1.PROVEEDOR,
		  T1.NETO_VEHICULO_FICHA,
		  T1.TOTAL_DESCUENTO_FICHA,
		  T1.FORMA_DE_PAGO,
		  T1.MONEDA_FICHA,
		  T1.TIPO_CAMBIO_FICHA,
		  T1.FAMILIA,
		  T1.TIPO_CONTRATO,
		  T1.VTA_KAUFMANN,
		  T1.DES_MOD1,
          T1.MODELO,
          T1.ZZ_VMS_LV,
          t2.PEDIDO, 
          t2.FECHA_APER, 
          t2.KML, 
          t2.DESC_CENTRO, 
          t2.RUT_SOLICITANTE, 
          T2.CATEGORIA_VISITA,  
          t2.OT_MANT, 
          t2.TIPO_MANT, 
          t2.DESC_MANT, 
          t2.TIPO_PED_CABECERA,
		  (CASE WHEN T3.COD_SEXO='' THEN '0' ELSE T3.COD_SEXO END) AS SEXO_CLIENTE
FROM INI_3_2 AS T1 LEFT JOIN QUERY_FOR_PEDIDO_TIPO_SERVICIO AS T2 ON (T1.ID_VEH=T2.ID_VEH AND T1.FEC_DOCTO_VTA<= t2.FECHA_APER <=T1.TERMINO_VTA)
LEFT JOIN CRM.CRM_CLIENTES_CHILE AS T3 ON (T1.RUT=T3.RUT);
QUIT;

/*determino ultimo kml detectado para estimacion de kml promedio*/

DATA CAB_PEDIDOS;
SET KAUFMANN.CAB_PEDIDOS;
WHERE ORGANIZ_VENTA IN ('1130','1131') AND ID_VEH NE '';
RUN;

PROC SORT DATA=CAB_PEDIDOS; BY ID_VEH DESCENDING FECHA_APER ;RUN;

DATA CAB_PEDIDOS1;
RETAIN A 0;
SET CAB_PEDIDOS;
BY ID_VEH;
IF FIRST.ID_VEH THEN A=0;
A=SUM(A,1);
RUN;

PROC SQL;
CREATE TABLE QUERY_INI_2 AS SELECT
T1.*,
T2.KML,
T2.FECHA_APER
FROM  INI_2 AS T1 LEFT JOIN CAB_PEDIDOS1 AS T2 ON (T1.ID_VEH=T2.ID_VEH) WHERE T2.KML NE . AND T2.A=1;
QUIT;


PROC SQL;
   CREATE TABLE WORK.KML_PROMEDIO AS 
   SELECT DISTINCT t1.NRO_CHASSIS, 
          t1.FEC_DOCTO_VTA,
          DATEPART(t1.FECHA_APER) AS FECHA_APER FORMAT=DDMMYY10., 
          t1.KML,
          INTCK('DAY',T1.FEC_DOCTO_VTA,DATEPART(T1.FECHA_APER))/30 AS ANTIGUEDAD_HASTA_VISITA,
	      t1.KML/(INTCK('DAY',T1.FEC_DOCTO_VTA,DATEPART(T1.FECHA_APER))/30) AS KML_PROMEDIO
FROM WORK.QUERY_INI_2 t1 where T1.KML >60 order by  t1.NRO_CHASSIS,  t1.FECHA_APER DESC;
QUIT;


DATA KML_PROMEDIO;
SET KML_PROMEDIO;
MEDIANA=KML_PROMEDIO;
IF KML_PROMEDIO <=0 THEN DELETE;
RUN;

PROC SORT DATA=KML_PROMEDIO NODUPKEY; BY NRO_CHASSIS;RUN;


/*
PROC MEANS DATA=QUERY_FOR_INI_41 NOPRINT;
BY NRO_CHASSIS;
VAR KML_PROMEDIO;
OUTPUT OUT=KML_PROMEDIO (DROP= _TYPE_ _FREQ_)
min=MEDIANA;
RUN;
*/

/* CONSTRUCCION MODELO PREDICTIVO */
PROC SQL;
   CREATE TABLE BASE_1 AS 
   SELECT DISTINCT t1.RUT, 
          t1.RAZON_SOCIAL, 
          t1.NRO_CHASSIS, 
          t1.NRO_VIN, 
          t1.CHASSIS_CORTO, 
          t1.ID_VEH, 
          t1.FEC_DOCTO_VTA, 
          t1.TERMINO_VTA, 
          t1.PATENTE,
		  t1.SUCURSAL, 
          t1.CIUDAD, 
          t1.COMUNA, 
          t1.PROVINCIA_CLIENTE, 
          t1.PROVEEDOR, 
          t1.NETO_VEHICULO_FICHA, 
          t1.TOTAL_DESCUENTO_FICHA, 
          t1.FORMA_DE_PAGO, 
          t1.MONEDA_FICHA, 
          t1.TIPO_CAMBIO_FICHA, 
          t1.FAMILIA, 
          t1.TIPO_CONTRATO,
		  T2.MEDIANA AS KML_PROMEDIO
      FROM WORK.INI_4 t1 LEFT JOIN KML_PROMEDIO AS T2 ON (T1.NRO_CHASSIS=T2.NRO_CHASSIS);
QUIT;

/*BUSCO ULTIMA Y PENULTIMA VISITA POR MANTENCION*/

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_INI_4_0000 AS 
   SELECT t1.*
      FROM WORK.INI_4 t1
      WHERE t1.OT_MANT = 'X'
      ORDER BY t1.RUT,t1.NRO_CHASSIS,t1.FECHA_APER DESC;
QUIT;

DATA QUERY_FOR_INI_4_0001;
RETAIN ULT 0;
SET QUERY_FOR_INI_4_0000;
BY RUT NRO_CHASSIS;
IF FIRST.NRO_CHASSIS OR FIRST.RUT THEN ULT=0;
ULT=SUM(ULT,1);
RUN;

PROC SQL;
CREATE TABLE BASE_2 AS SELECT
T1.*,
T2.FECHA_APER AS FECHA_APER_ANT,
T2.KML AS KML_ANT,
T2.DESC_CENTRO AS DESC_CENTRO_ANT,
T3.FECHA_APER AS FECHA_APER_ULT,
T3.KML AS KML_ULT,
T3.DESC_CENTRO AS DESC_CENTRO_ULT
FROM BASE_1 AS T1 
LEFT JOIN QUERY_FOR_INI_4_0001 AS T2 ON (T1.RUT=T2.RUT AND T1.NRO_CHASSIS=T2.NRO_CHASSIS AND T2.ULT=2)
LEFT JOIN QUERY_FOR_INI_4_0001  AS T3 ON (T1.RUT=T3.RUT AND T1.NRO_CHASSIS=T3.NRO_CHASSIS AND T3.ULT=1);
QUIT; 

/* si no tiene penultima mantencion, entonces la ultima pasa a ser su penultima */

DATA BASE_3;
SET BASE_2;
IF FECHA_APER_ANT = . THEN DO;
FECHA_APER_ANT = FECHA_APER_ULT;
KML_ANT = KML_ULT;
FECHA_APER_ULT=.;
KML_ULT=.;
DESC_CENTRO_ANT=DESC_CENTRO_ULT;
DESC_CENTRO_ULT='';
END;
ANTIGUEDAD_HASTA_VISITA = INTCK('DAY',FEC_DOCTO_VTA,FECHA_APER_ANT)/30;
ANTIGUEDAD_VEHICULO = INTCK('DAY',FEC_DOCTO_VTA,TODAY())/30;

*KML_PROMEDIO = KML_ANT/ANTIGUEDAD_HASTA_VISITA;

*KML_ENTRE_MANTENCION = SUM(KML_ULT,-KML_ANT);
ANTIGUEDAD_ENTRE_VISITAS = INTCK('DAY',FECHA_APER_ANT,FECHA_APER_ULT)/30;
*IF KML_ENTRE_MANTENCION <0 THEN KML_ENTRE_MANTENCION=.;
RUN;

/*VOY A BUSCAR SU KML ESTIMADO Y EN CASO DE NO EXISTIR USAR EL PROMEDIO*/


PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_AGF_VANS_1_EST_KML AS 
   SELECT t1.PATENTE, 
          t1.ID_VEH, 
		  T1.ANTIGUEAD,
          t1.p
      FROM CLIPVBM.AGF_VANS_1_EST_KML t1;
QUIT;

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_BASE_3 AS 
   SELECT t1.FAMILIA, T1.PROVINCIA_CLIENTE,
          MEAN(t1.KML_PROMEDIO) AS PROMEDIO_KML_MES_FAMILIA
      FROM WORK.BASE_3 t1
      WHERE t1.KML_PROMEDIO NOT = .
GROUP BY t1.FAMILIA,T1.PROVINCIA_CLIENTE ;
QUIT;

PROC SQL;
CREATE TABLE BASE_4 AS SELECT
T1.*,
T2.PROMEDIO_KML_MES_FAMILIA,
T3.P
FROM BASE_3 AS T1 LEFT JOIN QUERY_FOR_BASE_3 AS T2 ON (T1.FAMILIA=T2.FAMILIA AND T1.PROVINCIA_CLIENTE=T2.PROVINCIA_CLIENTE)
LEFT JOIN QUERY_FOR_AGF_VANS_1_EST_KML AS T3 ON (T1.ID_VEH=T3.ID_VEH);
QUIT;

/**********************************************/
/**********************************************/
/*DETERMINO CANDIDATOS A PROXIMO MANTENIMIENTO*/
/**********************************************/
/**********************************************/

DATA BASE_5;
SET BASE_4;
USADO=0;
IF PROVEEDOR="USADOS" THEN USADO=1;
IF KML_PROMEDIO=. THEN KML_PROMEDIO = PROMEDIO_KML_MES_FAMILIA;
DROP PROMEDIO_KML_MES_FAMILIA;
RUN;


PROC SQL;
CREATE TABLE CANDIDATOS AS SELECT
T1.*,
T3.FECHA_APER AS FECHA_ULT_VISITA,
T3.KML AS ULTIMO_KML,
T3.DESC_CENTRO AS SUCURSAL_ULT_VISITA,
T4.FECHA_APER AS ULTIMA_VISIT_CUALQUIER,
T4.KML AS ULTIMO_KML_CUALQUIER
FROM BASE_5 AS T1
LEFT JOIN QUERY_FOR_INI_4_0001  AS T3 ON (T1.RUT=T3.RUT AND T1.NRO_CHASSIS=T3.NRO_CHASSIS AND T3.ULT=1)
LEFT JOIN KML_PROMEDIO AS T4 ON (T1.NRO_CHASSIS = T4.NRO_CHASSIS);
QUIT;
 

DATA CANDIDATOS_1;
SET CANDIDATOS;
if p ne . then KML_ESTIMADO = p;
if p =. then do;
IF ULTIMO_KML_CUALQUIER NE . THEN KML_ESTIMADO = SUM(ULTIMO_KML_CUALQUIER,((INTCK('DAY',ULTIMA_VISIT_CUALQUIER,TODAY()-1)/30)*KML_PROMEDIO));
IF ULTIMO_KML_CUALQUIER = . THEN KML_ESTIMADO = ANTIGUEDAD_VEHICULO*KML_PROMEDIO;
end;

/*REFERENCIA DE INTERVALOS*/

/*VANS*/

INTERVALO=21000;

IF  DESC_CENTRO_ANT IN ("Sucursal Calama","Sucursal Copiapó","Sucursal Punta Arenas") THEN INTERVALO=11000;


/*CASO TEORICO*/

/*REVISEMOS CUANTAS MANTENCIONES DEBE YA HABER HECHO EL VEHICULO SEGUN SU MANTENCION Y SU ESTIMADO DE KML*/
NUM_MANT_TEORICAS=COMPRESS(CAT("",(KML_ESTIMADO/INTERVALO)));

/*EXTRAIGO SOLO LA PARTE ENTERA PARA SABER EL NUMERO DE MANTENCIONES*/
CANT_MANT_TEORICAS = SUBSTR(NUM_MANT_TEORICAS,1,INDEX(NUM_MANT_TEORICAS,"."))*1;

/*CALCULO LA DIFERENCIA ENTRE SU KILOMETRAKE Y EL KILOMETRAJE DE SU ULTIMA MANTENCION TEORICA*/
AUX=SUM(KML_ESTIMADO,-(CANT_MANT_TEORICAS*INTERVALO));

/*ENTONCES FINALMENTE TENGO EN "AUX" SU KML PARA PROXIMA MANTENCION, SUPONIENDO QUE DEBE LLEGAR A INTERVALO, VEMOS PROCENTUALMENTE SU PROXIMA MANT*/
LLEGADA=AUX/INTERVALO;

/*CASO REAL*/



/*ULTIMO KML DE VISITA DE MANTENCION MAS INTERVALO MENOS KML ESTIMADO*/

IF ULTIMO_KML NE . THEN DO;
REL = SUM(ULTIMO_KML,INTERVALO,-KML_ESTIMADO);
SALTO=1;
END;

DO I=1 TO 50;

/*SI LA VARIABLE REL ES NEGATIVA, SIGNIFICA QUE YA PASO SU MANTENCION AL MENOS EN KAUFMANN, BUSQUEMOS CUANTO FALTA HASTA SU PROXIMA EN UN LOOP...*/

IF ULTIMO_KML NE . AND REL<0 THEN DO ;
REL = SUM(REL,INTERVALO);
SALTO=I+1;
END;

END;

/* DE LOS REALES BUSCO SU AVANCE DE KML*/

IF REL NE . THEN AUX=SUM(INTERVALO,-REL);
IF REL NE . THEN LLEGADA=AUX/INTERVALO;
IF REL NE . THEN CANT_MANT_TEORICAS = SALTO;

*DROP I REL SALTO;
RUN;

DATA CLIPVBM.AGF_VANS_2_CANDIDATOS;
SET CANDIDATOS_1;


/*ENTOCES VEMOS CUANTOS KML LE FALTAN PARA SU PROXIMO MANT TEORICO*/
KML_FALTA_PROXIMO_MANT=SUM(INTERVALO,-AUX);

/*EN CUANTO TIEMPO CUMPLE ESTO EN BASE A SU KML ESTIMADO MENSUAL*/
TIEMPO_EN_MESES=KML_FALTA_PROXIMO_MANT/KML_PROMEDIO;
FECHA_ESTIMADA_MANT = INTNX('MONTH',TODAY(),TIEMPO_EN_MESES);
FORMAT FECHA_ESTIMADA_MANT MONYY5.;

KEEP NRO_CHASSIS FORMA_DE_PAGO PROVINCIA_CLIENTE SUCURSAL FAMILIA ANTIGUEDAD_HASTA_VISITA KML_ESTIMADO;
RUN;

DATA CANDIDATOS_1_;
SET CANDIDATOS_1;
/*LLAMAMOS A LOS QUE ESTEN POR SOBRE 80% DE LLEGADA*/
IF LLEGADA >=0.8;
RUN;

/*EN EL SIGUIENTE PASO VAMOS A CATEGORIZAR LA INFORMACION EN 3 SEGMENTOS:

	- CLIENTES QUE NUNCA HAN VENIDO
    - CLIENTES QUE HAN VENIDO PERO NO TIENEN INTENCION DE VOLVER
    - CLIENTE QUE VIENE Y TIENE INTENCION DE VENIR


/* CLIENTES QUE NUNCA HAN VENIDO  */

DATA SEGMENTO_1;
SET CANDIDATOS_1_;
IF ULTIMO_KML =.;
SEGMENTO=1;
RUN;


/* CLIENTES QUE HAN VENIDO */

DATA SEGMENTO_2_Y_3;
SET CANDIDATOS_1_;
IF ULTIMO_KML NE .;
RUN;




/*

PROC SQL;
   CREATE TABLE WORK.FILTER_FOR_CANDIDATOS_12_0004 AS 
   SELECT t1.NRO_CHASSIS, 
          t1.FAMILIA, 
          t1.DESC_CENTRO_ANT, 
          t1.ANTIGUEDAD_HASTA_VISITA, 
          t1.ANTIGUEDAD_VEHICULO, 
          t1.KML_ANT,
		  rand("Uniform") as aleat
      FROM WORK.CANDIDATOS_1 t1
      WHERE t1.KML_ANT NOT = .;
QUIT;

data FILTER_FOR_CANDIDATOS_12_0005;
set FILTER_FOR_CANDIDATOS_12_0004;
if aleat <0.5 then Role = "Train";
if 0.5<aleat <0.75 then Role = "Test";
if 0.75<aleat then Role = "Val";
run;

ODS GRAPHICS ON;
proc hpsplit data=FILTER_FOR_CANDIDATOS_12_0005 seed=123   ; 
   class FAMILIA DESC_CENTRO_ANT; 
   model KML_ANT = ANTIGUEDAD_HASTA_VISITA FAMILIA DESC_CENTRO_ANT;
      prune costcomplexity ;
	  rules file='\\Vm-kfmsasdev\fuentes_externas\CHILE\POST_VENTA\rules.txt';
	  partition fraction(validate=0.3 seed=123);
     code file='\\Vm-kfmsasdev\fuentes_externas\CHILE\POST_VENTA\hpsplexc.sas';
   output out=hpsplout;
run;
ODS GRAPHICS OFF;




 
data FILTER_FOR_CANDIDATOS_12_0006;
set FILTER_FOR_CANDIDATOS_12_0005;
ANTIGUEDAD_HASTA_VISITA = ANTIGUEDAD_VEHICULO;
run;


*/

/*
proc glmmod data=FILTER_FOR_CANDIDATOS_12_0004 outdesign=GLMDesign outparm=GLMParm noprint;
   class FAMILIA DESC_CENTRO_ANT;
   model KML_ANT = ANTIGUEDAD_VEHICULO ANTIGUEDAD_HASTA_VISITA FAMILIA DESC_CENTRO_ANT;
run;
*/

/*modelo lineal*/

/*
ods graphics on;
ods output ParameterEstimates=parametros;
 proc hpreg data=FILTER_FOR_CANDIDATOS_12_0005 seed=123;
    partition roleVar=Role(train='Train' validate='Val' test='Test') ;
	
    class FAMILIA DESC_CENTRO_ANT (order=data) ;  
    model KML_ANT =  ANTIGUEDAD_VEHICULO|ANTIGUEDAD_HASTA_VISITA|DESC_CENTRO_ANT /stb  vif ;
    selection method = stepwise(select=sl sle=0.1 sls=0.15 choose=validate) 
                       hierarchy=single  details=steps  ;
output out=out ;
run;   

data FILTER_FOR_CANDIDATOS_12_0006;
set FILTER_FOR_CANDIDATOS_12_0005;
ANTIGUEDAD_HASTA_VISITA = ANTIGUEDAD_VEHICULO;
run;

proc plm restore=work.parametros;
   score data=FILTER_FOR_CANDIDATOS_12_0006 out=Pred;  
run;
*/